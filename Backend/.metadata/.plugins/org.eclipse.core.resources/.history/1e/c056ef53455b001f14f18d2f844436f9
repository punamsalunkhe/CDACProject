package com.pet.service;

import java.util.List;
import java.io.File;
import java.io.IOException;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import com.pet.entities.Pet;
import com.pet.entities.Shelter;
import com.pet.enums.PetAdoptionStatus;
import com.pet.enums.PetCategory;
import com.pet.enums.PetHealthStatus;
import com.pet.enums.PetTrainStatus;
import com.pet.repository.PetRepository;
import com.pet.repository.ShelterRepository;

import jakarta.servlet.http.HttpSession;
import jakarta.transaction.Transactional;
@Component
@Transactional
public class PetServiceImpl implements IPetService {

	@Autowired
	private PetRepository petRepository;
	
	@Autowired
	private ShelterRepository shelterRepository;
	
	@Override
	public Pet createPet(String name, String species, String breed, int age, String color, String gender,
	                     String description, String category, String healthStatus, String petAdoptionStatus, 
	                     String petTrainStatus, MultipartFile petPic, HttpSession session) {
		

	    Pet pet = new Pet();
	    pet.setName(name);
	    pet.setSpecies(species);
	    pet.setBreed(breed);
	    pet.setAge(age);
	    pet.setColor(color);
	    pet.setGender(gender);
	    pet.setDescription(description);
	    pet.setCategory(PetCategory.valueOf(category));
	    pet.setHealthStatus(PetHealthStatus.valueOf(healthStatus));
	    pet.setPetAdoptionStatus(PetAdoptionStatus.valueOf(petAdoptionStatus));
	    pet.setPetTrainStatus(PetTrainStatus.valueOf(petTrainStatus));
        // Get the logged-in user's ID from the session
        Long userId = (Long) session.getAttribute("user_id");
        if (userId != null) {
            Shelter shelter = shelterRepository.findByUserId(userId);
            if (shelter != null) {
                pet.setShelter(shelter);
            }
        }
	    
	    if (petPic != null && !petPic.isEmpty()) {
	        String fileName = UUID.randomUUID().toString() + "_" + petPic.getOriginalFilename();
	        try {
	            // Define the path relative to the project root
	            String uploadDirPath = System.getProperty("user.dir") + File.separator + "uploads";
	            File uploadDir = new File(uploadDirPath);
	            
	            // Create uploads directory if it does not exist
	            if (!uploadDir.exists()) {
	                uploadDir.mkdirs(); // Creates the directory and any necessary but nonexistent parent directories
	            }
	            
	            File file = new File(uploadDir, fileName);
	            petPic.transferTo(file); // Save the file to the directory
	            pet.setPetPicPath(fileName);
	        } catch (IOException e) {
	            e.printStackTrace();
	            // Handle file upload errors appropriately
	        }
	    }
	    
	    return petRepository.save(pet);
	}
	
	@Override
    public List<Pet> getPetsByShelterId(Integer shelterId) {
        return petRepository.findByShelter(shelterId);
    }
	
	@Override
    public Integer findShelterIdByUserId(Long userId) {
        Shelter shelter = shelterRepository.findByUserId(userId);
        return shelter.getShelterId();
    }

}
