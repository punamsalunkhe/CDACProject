package com.pet.controller;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.pet.dto.petDTO;
import com.pet.entities.Pet;
import com.pet.service.IPetService;

import jakarta.servlet.http.HttpSession;

@RestController
@RequestMapping("/pets")
@CrossOrigin(origins = "http://localhost:3000", allowCredentials = "true")
public class PetController {

	@Autowired IPetService petService;
	
    @PostMapping("/upload")
    public ResponseEntity<String> uploadPet(
            @RequestParam String name,
            @RequestParam String species,
            @RequestParam String breed,
            @RequestParam int age,
            @RequestParam String color,
            @RequestParam String gender,
            @RequestParam String description,
            @RequestParam String category,
            @RequestParam String healthStatus,
            @RequestParam String petAdoptionStatus,
            @RequestParam String petTrainStatus,
            @RequestParam(value = "petPic", required = false) MultipartFile petPic,
            HttpSession session) {
        try {
            petService.createPet(name, species, breed, age, color, gender, description, category,healthStatus, petAdoptionStatus, petTrainStatus ,petPic, session);
            return ResponseEntity.ok("Pet uploaded successfully");
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Failed to upload pet: " + e.getMessage());
        }
    }
    
    @GetMapping("/shelter-pets")
    public ResponseEntity<List<petDTO>> getPetsByShelterId(HttpSession session) {
        // Fetch the logged-in user's ID from the session
        Long userId = (Long) session.getAttribute("user_id");

        if (userId == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
        }
        
        // Get shelter_id using the user_id
        Integer shelterId = petService.findShelterIdByUserId(userId);

        // Fetch all pets by shelter_id
        List<petDTO> pets = petService.getPetsByShelterId(shelterId);

        return ResponseEntity.ok(pets);
    }
}
