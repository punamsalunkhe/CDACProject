package com.pet.controller;

import java.io.IOException;
import java.security.Principal;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.pet.dto.UserDTO;
import com.pet.entities.User;
import com.pet.enums.RoleEnum;
import com.pet.service.IUserDetails;


@RestController
@RequestMapping("/pet")
//@CrossOrigin("*")
@CrossOrigin(origins = "http://localhost:3000", allowCredentials = "true")
public class UsersController {
	
	@Autowired
	private IUserDetails userDetails;
	
	@PostMapping("/register")
	public ResponseEntity<?> registerUser(
			@RequestParam("email") String email,
            @RequestParam("password") String password,
           // @RequestParam("firstName") String firstName,
            //@RequestParam("lastName") String lastName,
            @RequestParam(value = "profilePicture", required = false) MultipartFile profilePicture,
            @RequestParam("userRoles") Set<String> userRoles) throws IOException{
		
		//the email was getting stored in the database with double quotes, that why trimmed it before storing in the database
		//String quotesRemovedEmail = email.replace("\"", "").trim();
		
		Set<RoleEnum> roleEnums = userRoles.stream()
                .map(roleString -> {
                    // Clean up and normalize role string
                    String cleanedRole = roleString.replace("\"", "").trim().toUpperCase();
                    try {
                        return RoleEnum.valueOf(cleanedRole);
                    } catch (IllegalArgumentException e) {
                        throw new RuntimeException("Invalid role: " + cleanedRole, e);
                    }
                })
                .collect(Collectors.toSet());

        UserDTO userDTO = new UserDTO();
        userDTO.setEmail(email);
      //  userDTO.setFirstName(firstName);
        userDTO.setPassword(password);
        userDTO.setProfilePicture(profilePicture);
        userDTO.setUserRoles(roleEnums);

        userDetails.registerUser(userDTO);
        return ResponseEntity.status(HttpStatus.CREATED).body(null);
	}
	
	@GetMapping("/shelter/shelter-id")
	public ResponseEntity<Map<String, Object>> getShelterId(@AuthenticationPrincipal Principal principal) {
	    Map<String, Object> response = new HashMap<>();
	    
	    if (principal == null) {
	        response.put("message", "Unauthorized access");
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
	    }

	    String email = principal.getName();
	    Optional<User> userOpt = userDetails.findByEmail(email);

	    if (userOpt.isPresent()) {
	        User user = userOpt.get();
	        Long shelterId = user.getId(); // Adjust this logic as needed
	        response.put("shelterId", shelterId);
	        return ResponseEntity.ok(response);
	    } else {
	        response.put("message", "User not found");
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
	    }
	}


	
}