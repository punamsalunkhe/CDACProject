package com.pet.service;

import java.util.List;
import java.util.Map;
import java.io.File;
import java.io.IOException;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import com.pet.dto.petDTO;
import com.pet.entities.Pet;
import com.pet.entities.Shelter;
import com.pet.enums.PetAdoptionStatus;
import com.pet.enums.PetCategory;
import com.pet.enums.PetHealthStatus;
import com.pet.enums.PetTrainStatus;
import com.pet.repository.PetRepository;
import com.pet.repository.ShelterRepository;

import jakarta.servlet.http.HttpSession;
import jakarta.transaction.Transactional;
@Component
@Transactional
public class PetServiceImpl implements IPetService {

	@Autowired
	private PetRepository petRepository;
	
	@Autowired
	private ShelterRepository shelterRepository;
	
	@Override
	public Pet createPet(String name, String species, String breed, int age, String color, String gender,
	                     String description, String category, String healthStatus, String petAdoptionStatus, 
	                     String petTrainStatus, MultipartFile petPic, HttpSession session) {
		

	    Pet pet = new Pet();
	    pet.setName(name);
	    pet.setSpecies(species);
	    pet.setBreed(breed);
	    pet.setAge(age);
	    pet.setColor(color);
	    pet.setGender(gender);
	    pet.setDescription(description);
	    pet.setCategory(PetCategory.valueOf(category));
	    pet.setHealthStatus(PetHealthStatus.valueOf(healthStatus));
	    pet.setPetAdoptionStatus(PetAdoptionStatus.valueOf(petAdoptionStatus));
	    pet.setPetTrainStatus(PetTrainStatus.valueOf(petTrainStatus));
        // Get the logged-in user's ID from the session
        Long userId = (Long) session.getAttribute("user_id");
        if (userId != null) {
            Shelter shelter = shelterRepository.findByUserId(userId);
            if (shelter != null) {
                pet.setShelter(shelter);
            }
        }
	    
	    if (petPic != null && !petPic.isEmpty()) {
	        String fileName = UUID.randomUUID().toString() + "_" + petPic.getOriginalFilename();
	        try {
	            // Define the path relative to the project root
	            String uploadDirPath = System.getProperty("user.dir") + File.separator + "uploads";
	            File uploadDir = new File(uploadDirPath);
	            
	            // Create uploads directory if it does not exist
	            if (!uploadDir.exists()) {
	                uploadDir.mkdirs(); // Creates the directory and any necessary but nonexistent parent directories
	            }
	            
	            File file = new File(uploadDir, fileName);
	            petPic.transferTo(file); // Save the file to the directory
	            pet.setPetPicPath(fileName);
	        } catch (IOException e) {
	            e.printStackTrace();
	            // Handle file upload errors appropriately
	        }
	    }
	    
	    return petRepository.save(pet);
	}
	
	@Override
    public List<petDTO> getPetsByShelterId(Integer shelterId) {
        List<Pet> pets= petRepository.findPetsByShelterId(shelterId);
        return pets.stream().map(pet-> {
        	petDTO dto=new petDTO();
        	dto.setPetId(pet.getPet_id());
        	dto.setName(pet.getName());
        	dto.setSpecies(pet.getSpecies());
        	dto.setBreed(pet.getBreed());
        	dto.setAge(pet.getAge());
        	dto.setColor(pet.getColor());
        	dto.setGender(pet.getGender());
        	dto.setDescription(pet.getDescription());
        	dto.setCategory(pet.getCategory());
        	dto.setPetHealthStatus(pet.getHealthStatus());
        	dto.setPetAdoptionStatus(pet.getPetAdoptionStatus());
        	dto.setPetTrainStatus(pet.getPetTrainStatus());
        	dto.setPetPicture(pet.getPetPicPath());
        	return dto;
        }).collect(Collectors.toList());
    }
	
	@Override
    public Integer findShelterIdByUserId(Long userId) {
        Shelter shelter = shelterRepository.findByUserId(userId);
        if (shelter == null) {
            throw new RuntimeException("No shelter found for the given user ID");
        }
        return shelter.getShelterId();
    }

	@Override
	public void deletePet(int petId) {
		Pet pet = petRepository.findById(petId)
	            .orElseThrow(() -> new RuntimeException("Pet not found with id: " + petId));
	        petRepository.delete(pet);
	}

	@Override
	public Pet updatePet(Integer petId, Map<String, String> updatedPet, MultipartFile petPicture) {
	    return petRepository.findById(petId).map(pet -> {
	        pet.setName(updatedPet.get("name"));
	        pet.setSpecies(updatedPet.get("species"));
	        pet.setBreed(updatedPet.get("breed"));
	        pet.setAge(Integer.parseInt(updatedPet.get("age")));
	        pet.setColor(updatedPet.get("color"));
	        pet.setGender(updatedPet.get("gender"));
	        pet.setDescription(updatedPet.get("description"));
	        pet.setPetAdoptionStatus(PetAdoptionStatus.valueOf(updatedPet.get("petAdoptionStatus")));
	        pet.setPetTrainStatus(PetTrainStatus.valueOf(updatedPet.get("petTrainStatus")));
	        pet.setHealthStatus(PetHealthStatus.valueOf(updatedPet.get("petHealthStatus")));

	        if (petPicture != null && !petPicture.isEmpty()) {
	            // Handle file upload
	            String fileName = System.currentTimeMillis() + "_" + petPicture.getOriginalFilename();
	            // Save file to your storage
	            pet.setPetPicPath(fileName);
	        }

	        return petRepository.save(pet);
	    }).orElse(null);
	}

	@Override
	public List<petDTO> getPetByCategory(PetCategory category) {
		return petRepository.findByCategory(category)
				.stream()
		        .map(pet -> new petDTO(pet.getPet_id(), pet.getName(), pet.getAge(), pet.getGender(), pet.getPetPicPath()))
		        .collect(Collectors.toList());
	}
	
	
	public petDTO getPetById(Integer petId) {
        Pet pet = petRepository.findById(petId).orElse(null);
        if (pet != null) {
            return new petDTO(
                pet.getPet_id(),
                pet.getName(),
                pet.getAge(),
                pet.getBreed(),
                pet.getColor(),
                pet.getGender(),
                pet.getPetPicPath(),
                pet.getPetTrainStatus(),
                pet.getHealthStatus(),
                pet.getSpecies()
            );
        }
        return null;
    }

}
